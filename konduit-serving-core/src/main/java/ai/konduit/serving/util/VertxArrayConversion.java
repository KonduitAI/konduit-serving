/*
 *
 *  * ******************************************************************************
 *  *  * Copyright (c) 2015-2019 Skymind Inc.
 *  *  * Copyright (c) 2019 Konduit AI.
 *  *  *
 *  *  * This program and the accompanying materials are made available under the
 *  *  * terms of the Apache License, Version 2.0 which is available at
 *  *  * https://www.apache.org/licenses/LICENSE-2.0.
 *  *  *
 *  *  * Unless required by applicable law or agreed to in writing, software
 *  *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  *  * License for the specific language governing permissions and limitations
 *  *  * under the License.
 *  *  *
 *  *  * SPDX-License-Identifier: Apache-2.0
 *  *  *****************************************************************************
 *
 *
 */

package ai.konduit.serving.util;

import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonArray;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.serde.binary.BinarySerde;

import java.nio.ByteBuffer;

/**
 * A utility class used to handle buffer array conversion starting from
 * a {@link Buffer} generated by vertx.
 *
 * @author Adam Gibson
 */
public class VertxArrayConversion {

    /**
     * Convert a {@link Buffer}
     * to an {@link INDArray}
     * using one of three types:
     * numpy: (converts using {@link Nd4j#createNpyFromByteArray(byte[])}
     * nd4j: (converts using {@link BinarySerde#toArray(ByteBuffer)}
     * with a direct byte buffer copy (nd4j requires direct allocation
     * for byte buffers
     * json:  (converts with a straight for loop, note that this only supports matrices only)
     *
     * @param buffer the buffer to convert
     * @param type   the type of buffer
     * @return the created ndarray
     */
    public static INDArray toArray(Buffer buffer, String type) {
        INDArray trueFeedback = null;
        switch (type) {
            case "numpy":
                trueFeedback = Nd4j.createNpyFromByteArray(buffer.getBytes());
                break;
            case "nd4j":
                ByteBuffer direct = ByteBuffer.allocateDirect(buffer.length());
                direct.put(buffer.getBytes());
                direct.rewind();
                trueFeedback = BinarySerde.toArray(direct);
                break;
            case "json":
                JsonArray jsonArray = new JsonArray(buffer.toString());
                INDArray arr = Nd4j.create(jsonArray.size(), jsonArray.getJsonArray(0).size());
                for (int i = 0; i < arr.rows(); i++) {
                    for (int j = 0; j < arr.columns(); j++) {
                        arr.putScalar(i, j, jsonArray.getJsonArray(i).getDouble(j));
                    }
                }

                trueFeedback = arr;
                break;
            default:
                throw new IllegalArgumentException("Illegal type " + type);

        }

        return trueFeedback;
    }

}
